{"ast":null,"code":"export function getConnectionAPI(url) {\n  return fetch(url).then(function (response) {\n    var retorno = {\n      sts: response.status,\n      dados: response.json()\n    };\n    return retorno;\n  }).catch(function (e) {\n    console.warn(e);\n  });\n}\nexport function postConnectionAPI(url, body) {\n  return fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  }).then(function (response) {\n    var retorno = {\n      sts: response.status,\n      dados: response.json()\n    };\n    return retorno;\n  }).catch(function (error) {\n    console.error(\"Erro: \" + error);\n  });\n}\nexport function patchConnectionAPI(url, body) {\n  return fetch(url, {\n    method: 'PATCH',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  }).then(function (response) {\n    return response.json();\n  }).then(function (responseJson) {\n    return responseJson;\n  }).catch(function (error) {\n    console.error(\"Erro: \" + error);\n  });\n}\nexport function putConnectionAPI(url, body) {\n  return fetch(url, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  }).then(function (response) {\n    return response.json();\n  }).then(function (responseJson) {\n    return responseJson;\n  }).catch(function (error) {\n    console.error(\"Erro: \" + error);\n  });\n}\nexport function deleteConnectionAPI(url, body) {\n  if (body) {\n    return fetch(url, {\n      method: 'DELETE',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    }).then(function (response) {\n      var retorno = {\n        sts: response.status,\n        dados: response.json()\n      };\n      return retorno;\n    }).catch(function (e) {\n      console.warn(e);\n    });\n  } else {\n    return fetch(url, {\n      method: 'DELETE',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      var retorno = {\n        sts: response.status,\n        dados: response.json()\n      };\n      return retorno;\n    }).catch(function (e) {\n      console.warn(e);\n    });\n  }\n}","map":{"version":3,"sources":["/Users/lucasdepaula/Documents/Github/app-mobile-leak-gas/utils/ConnectionAPI.js"],"names":["getConnectionAPI","url","fetch","then","response","retorno","sts","status","dados","json","catch","e","console","warn","postConnectionAPI","body","method","headers","Accept","JSON","stringify","error","patchConnectionAPI","responseJson","putConnectionAPI","deleteConnectionAPI"],"mappings":"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","sourcesContent":["//EXEBUTA REQUISIÇÕES PARA APIS COM MÉTODO GET\nexport function getConnectionAPI(url) {    \n    return fetch(url)\n        .then((response) => {            \n            var retorno ={\n                sts: response.status,\n                dados: response.json()\n            }\n            return retorno;\n        })        \n        .catch(e => { // caso ocorra algum erro ao obter os dados\n            console.warn(e);\n            \n        });\n}\n\n//EXEBUTA REQUISIÇÕES PARA APIS COM MÉTODO POST\nexport function postConnectionAPI(url, body) {\n    return fetch(url, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',            \n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body),\n    })\n    .then((response) => {            \n        var retorno ={\n            sts: response.status,\n            dados: response.json()\n        }\n        return retorno;\n    }) \n    .catch((error) => {\n        console.error(\"Erro: \" + error);\n    });\n}\n\n//EXEBUTA REQUISIÇÕES PARA APIS COM MÉTODO PATCH\nexport function patchConnectionAPI(url, body) {\n    return fetch(url, {\n        method: 'PATCH',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body),\n    })\n    .then((response) => response.json())\n    .then((responseJson) => {\n        return responseJson;\n    })\n    .catch((error) => {\n        console.error(\"Erro: \" + error);\n    });\n}\n\n//EXEBUTA REQUISIÇÕES PARA APIS COM MÉTODO PUT\nexport function putConnectionAPI(url, body) {\n    return fetch(url, {\n        method: 'PUT',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body),\n    })\n    .then((response) => response.json())\n    .then((responseJson) => {\n        return responseJson;\n    })\n    .catch((error) => {\n        console.error(\"Erro: \" + error);\n    });\n}\n\n//EXEBUTA REQUISIÇÕES PARA APIS COM MÉTODO DELETE\nexport function deleteConnectionAPI(url, body) {\n    if (body) {\n        return fetch(url, {\n            method: 'DELETE',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n        })\n        .then((response) => {            \n            var retorno ={\n                sts: response.status,\n                dados: response.json()\n            }\n            return retorno;\n        })        \n        .catch(e => { // caso ocorra algum erro ao obter os dados\n            console.warn(e);\n            \n        });\n    } else {\n        return fetch(url, {\n            method: 'DELETE',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            }\n        })\n        .then((response) => {            \n            var retorno ={\n                sts: response.status,\n                dados: response.json()\n            }\n            return retorno;\n        })        \n        .catch(e => { // caso ocorra algum erro ao obter os dados\n            console.warn(e);\n            \n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}